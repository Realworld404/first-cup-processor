{
  "_comment": "Copyright (C) 2025 Jason Brett - Licensed under GPL-3.0-or-later - See LICENSE file",
  "name": "YouTube Transcript Processor",
  "nodes": [
    {
      "parameters": {
        "path": "/path/to/your/transcripts",
        "event": "add"
      },
      "name": "Watch Transcript Folder",
      "type": "n8n-nodes-base.localFileTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "transcript-watcher"
    },
    {
      "parameters": {
        "filePath": "={{ $json.path }}",
        "options": {}
      },
      "name": "Read Transcript File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract text from binary data\nconst binaryData = $input.item.binary.data;\nconst transcript = Buffer.from(binaryData.data, binaryData.encoding).toString('utf-8');\n\n// Get filename without extension\nconst fullPath = $input.item.json.path;\nconst filename = fullPath.split('/').pop().replace(/\\.[^/.]+$/, '');\n\nreturn {\n  transcript: transcript,\n  filename: filename,\n  originalPath: fullPath\n};"
      },
      "name": "Extract Transcript Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "anthropicApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "={{ $env.ANTHROPIC_API_KEY }}"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-sonnet-4-20250514"
            },
            {
              "name": "max_tokens",
              "value": 4000
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"user\", \"content\": \"Analyze this YouTube show transcript and create three deliverables:\\n\\nTRANSCRIPT:\\n{{ $json.transcript }}\\n\\nDELIVERABLES:\\n\\n1. TITLE OPTIONS (5 options)\\nCreate 5 title options that are:\\n- Keyword-rich for SEO\\n- Optimized for virality (curiosity gap, emotional trigger, or bold claim)\\n- Under 60 characters\\n- Accurately represent the content\\n\\nFormat each on a new line as:\\nTITLE 1: [title]\\nTITLE 2: [title]\\nTITLE 3: [title]\\nTITLE 4: [title]\\nTITLE 5: [title]\\n\\n2. YOUTUBE DESCRIPTION\\nWrite a compelling description including:\\n- Hook paragraph (2-3 sentences) that entices viewers\\n- Key topics covered (3-5 bullet points with brief descriptions)\\n- Chapter breaks with timestamps in this EXACT format:\\n  00:00 - Introduction\\n  05:23 - [Topic name]\\n  12:45 - [Topic name]\\n  [derive timestamps and topics from the transcript content]\\n- Call to action (subscribe, like, comment)\\n- 5-10 relevant hashtags\\n\\nStart this section with 'YOUTUBE DESCRIPTION:' header.\\n\\n3. NEWSLETTER ARTICLE\\nWrite a 200-300 word newsletter article that:\\n- Opens with an engaging hook that creates curiosity\\n- Summarizes the main discussion in 2-3 paragraphs\\n- Highlights ONE specific, actionable key takeaway\\n- Ends with a clear CTA to watch the full video on YouTube\\n- Uses a conversational, friendly tone (not overly promotional)\\n- Include a suggested subject line at the top\\n\\nStart this section with 'NEWSLETTER ARTICLE:' header.\\n\\nPlease format your response with clear section headers so outputs can be easily parsed.\"}]"
            }
          ]
        },
        "options": {}
      },
      "name": "Call Claude API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Claude's response\nconst response = $input.item.json.content[0].text;\n\n// Extract titles\nconst titleRegex = /TITLE \\d+: (.+?)(?=\\n|$)/g;\nconst titles = [];\nlet match;\nwhile ((match = titleRegex.exec(response)) !== null) {\n  titles.push(match[1]);\n}\n\n// Extract YouTube description\nconst descMatch = response.match(/YOUTUBE DESCRIPTION:(.*?)(?=NEWSLETTER ARTICLE:|$)/is);\nconst description = descMatch ? descMatch[1].trim() : '';\n\n// Extract newsletter article\nconst newsletterMatch = response.match(/NEWSLETTER ARTICLE:(.*?)$/is);\nconst newsletter = newsletterMatch ? newsletterMatch[1].trim() : '';\n\n// Get filename from previous node\nconst filename = $('Extract Transcript Text').item.json.filename;\n\nreturn {\n  filename: filename,\n  titles: titles,\n  titlesText: titles.map((t, i) => `${i + 1}. ${t}`).join('\\n'),\n  description: description,\n  newsletter: newsletter,\n  fullResponse: response\n};"
      },
      "name": "Parse Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.filename }}_titles.txt",
        "filePath": "/path/to/your/outputs/{{ $json.filename }}",
        "data": "={{ '=== TITLE OPTIONS ===\\n\\n' + $json.titlesText }}",
        "options": {}
      },
      "name": "Save Titles",
      "type": "n8n-nodes-base.fileSystem",
      "typeVersion": 1,
      "position": [
        1340,
        200
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.filename }}_youtube_description.txt",
        "filePath": "/path/to/your/outputs/{{ $json.filename }}",
        "data": "={{ $json.description }}",
        "options": {}
      },
      "name": "Save YouTube Description",
      "type": "n8n-nodes-base.fileSystem",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.filename }}_newsletter.txt",
        "filePath": "/path/to/your/outputs/{{ $json.filename }}",
        "data": "={{ $json.newsletter }}",
        "options": {}
      },
      "name": "Save Newsletter Article",
      "type": "n8n-nodes-base.fileSystem",
      "typeVersion": 1,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.filename }}_full_response.txt",
        "filePath": "/path/to/your/outputs/{{ $json.filename }}",
        "data": "={{ $json.fullResponse }}",
        "options": {}
      },
      "name": "Save Full Response",
      "type": "n8n-nodes-base.fileSystem",
      "typeVersion": 1,
      "position": [
        1340,
        500
      ]
    }
  ],
  "connections": {
    "Watch Transcript Folder": {
      "main": [
        [
          {
            "node": "Read Transcript File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Transcript File": {
      "main": [
        [
          {
            "node": "Extract Transcript Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Transcript Text": {
      "main": [
        [
          {
            "node": "Call Claude API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude API": {
      "main": [
        [
          {
            "node": "Parse Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Response": {
      "main": [
        [
          {
            "node": "Save Titles",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save YouTube Description",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Newsletter Article",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Full Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-25T00:00:00.000Z",
  "versionId": "1"
}